#version 150

struct material_t {
  vec4 emission;
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  float shininess;
};

struct light_t {
  vec3 pos;
  vec4 ambient;
  vec4 specular;
  vec4 diffuse;
  vec3 dir; // Only used for spotlights
  
  float constantAttenuation;
  float linearAttenuation;
  float quadraticAttenuation;
};

uniform light_t oo_Light[1];
uniform vec4 oo_LightGlobalAmbient;

uniform material_t oo_Material;

uniform bool oo_Texture0_valid; // Normal
uniform bool oo_Texture1_valid; // Specular
uniform bool oo_Texture2_valid; // Night

uniform sampler2D oo_Texture0; // Normal texture
uniform sampler2D oo_Texture1; // Specular map
uniform sampler2D oo_Texture2; // Night texture

in vec2 TexCoord;

in vec3 N, Ld, Eye;
in float Dist;

const float twilightZone = 0.25;
const float invTwilightZone = 1.0 / (2.0 * twilightZone);

out vec4 oo_FragColor;
void
main()
{
  vec3 Normal = normalize(N);
  float NdotL = max(dot(Normal, Ld), 0.0);

  vec4 Ambient, AmbientGlob;

  vec4 diffuseTexel = texture(oo_Texture0, TexCoord);
  vec4 diffuseNightTexel = texture(oo_Texture2, TexCoord);
  vec4 diffuse = diffuseTexel * oo_Light[0].diffuse;
  vec4 diffuseNight = diffuseNightTexel * oo_Light[0].diffuse;

  // Ambient light
  if (oo_Texture2_valid) {
    AmbientGlob = oo_LightGlobalAmbient * diffuseNightTexel;
    Ambient = diffuseNightTexel * oo_Light[0].ambient;
  } else {
    AmbientGlob = oo_LightGlobalAmbient * diffuseTexel;
    Ambient = diffuseTexel * oo_Light[0].ambient;
  }

  vec4 color = AmbientGlob;

  if (NdotL > 0.0) {
    float att = 1.0 / (oo_Light[0].constantAttenuation +
                      Dist * oo_Light[0].linearAttenuation +
                      Dist * Dist * oo_Light[0].quadraticAttenuation);

    color += att * (diffuse * NdotL + Ambient);

    float RdotE = max(dot(reflect(-Ld, Normal), normalize(Eye)), 0.0);

    //vec4 specColor = diffuseTexel + oo_Material.specular;
    vec4 specColor = oo_Material.specular;
    vec4 specIntensity = vec4(0.0,0.0,0.0,0.0);

    // Note: Grayscale spec map texture
    if (oo_Texture1_valid && (texture(oo_Texture1, TexCoord).r > 0.1) || !oo_Texture1_valid) {
      specIntensity = oo_Light[0].specular * pow(RdotE, oo_Material.shininess);
    }

    color += att * specColor * specIntensity;
  }

  if (oo_Texture2_valid) {
    // Mix day and night if we are in the twilight zone
    if (abs(NdotL) < twilightZone) {
      color = mix(diffuseNightTexel, color,
                  (NdotL+twilightZone) * invTwilightZone);
    }

    if (NdotL < -twilightZone) {
      // Override the global ambient value, we use a night texture
      color = diffuseNightTexel;
    }
  }

  oo_FragColor = color;
}
