#version 150

struct material_t {
  vec4 emission;
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  float shininess;
};


struct light_t {
  vec3 pos;
  vec4 ambient;
  vec4 specular;
  vec4 diffuse;
  vec3 dir; // Only used for spotlights

  float constantAttenuation;
  float linearAttenuation;
  float quadraticAttenuation;
};


uniform light_t oo_Light[1];
uniform vec4 oo_LightGlobalAmbient;

uniform material_t oo_Material;


in vec4 Diffuse, Ambient, AmbientGlob;
in vec3 N, Ld, Eye;
in float Dist;

out vec4 oo_FragColor;

void
main()
{
  vec3 Normal = normalize(N);
  vec4 color = AmbientGlob;

  float NdotL = max(dot(Normal, Ld), 0.0);

  if (NdotL > 0.0) {
    float att = 1.0 / (oo_Light[0].constantAttenuation +
                 Dist * oo_Light[0].linearAttenuation +
                 Dist * Dist * oo_Light[0].quadraticAttenuation);

    color += att * (Diffuse * NdotL + Ambient);
    float RdotE = max(dot(reflect(-Ld, Normal), normalize(Eye)), 0.0);

    vec4 Spec = oo_Material.specular * oo_Light[0].specular *
                pow(RdotE, oo_Material.shininess);

    color += att * Spec;
  }

  oo_FragColor = color;
}
